#!/usr/bin/env ruby
# Starts rake jobs:work in the background or stops it.
#
# This script had to be created because the F*ing delayed_job
# script does not work.  A bad interaction between the pg and koala gems causes
# postgresql connection to become FUBAR.
# see this for a detailed explanation of the problem:
# http://stackoverflow.com/questions/26515765/weird-interaction-of-delayed-job-daemons-koala-pg


require 'fileutils'

$pid_dir="tmp/pids"
$log_dir="log"
FileUtils.mkdir_p $pid_dir
FileUtils.mkdir_p $log_dir

$pid_file="#{$pid_dir}/job_worker.pid"
$log_file="#{$log_dir}/job_worker.log"

$start_command='bundle exec rake jobs:work'

# used when you want to wait for something that is not your child process
def process_running?(pid)
  Process.kill(0,pid)
  return true
rescue Errno::ESRCH
  return false
end

def wait_for_death_of(pid)
  while process_running?(pid)
    sleep 0.2
  end
  true
end

def daemon_pid
   if File.exists?($pid_file) 
     return IO.read($pid_file).to_i
   else
     return nil
   end
end

def start_it
   pid = daemon_pid()
   if pid && process_running?(pid)
     STDERR.puts "already running"
     STDERR.puts "use restart if that is what you want"
     return false
   end
   STDERR.puts "starting #{$start_command}"
   # shell equivalent
   # nohup $start_command >> $log_file 2>&1 &
   if pid = Process.fork
     File.open($pid_file,'w') { |f| f.puts pid }
   else
     Signal.trap("HUP") do
     end
     $stdout.reopen($log_file,'a')
     $stderr.reopen($stdout)
     $stdout.puts("stdout")
     $stderr.puts("stderr")
     exec($start_command)
   end
   return true
end

def stop_it
  pid = daemon_pid()
  if pid
    $stderr.puts "stopping.."
    begin
      Process.kill("TERM", pid) 
    rescue Errno::ESRCH
    end
    if wait_for_death_of(pid)
      File.unlink($pid_file)
    end
  end
end

def restart_it
   stop_it
   start_it
end

def show_status
  if pid = daemon_pid()
    if process_running?(pid)
      $stderr.puts "running"
    else
      $stderr.puts "died unnatural death:"
      $stderr.puts "see #{$log_file} for details"
    end
  else
      $stderr.puts "not running"
  end
end

action=ARGV[0]

case action
when 'start'
  start_it
when 'stop'
  stop_it
when 'restart'
  restart_it
when 'status'
  show_status
else
  $stderr.puts "usage: delayed_job_rake_daemon start|stop|restart|status"
  exit 1
end
